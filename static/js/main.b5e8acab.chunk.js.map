{"version":3,"sources":["images/world-logo.png","images/animal-bear.png","images/animal-cheetah.png","images/animal-giraffe.png","images/animal-monkey.png","images/animal-panther.png","images/map.png","ActivityMap.tsx","ActivityRunner.tsx","IFrameDisplayer.tsx","ActivityManager.tsx","WelcomeScreen.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","src_ActivityMap","_super","ActivityMap","props","call","this","__extends","prototype","drawMap","activityRunFunction","onActivitySelection","map","title","imageSource","map_default","a","coordinateSpace","width","height","pins","name","description","animal_giraffe_default","activityToRun","position","x","y","dimensions","callbackFunction","animal_monkey_default","animal_cheetah_default","animal_panther_default","animal_bear_default","basic_custom_map_min","componentDidMount","componentDidUpdate","render","react","id","src_ActivityRunner","ActivityRunner","ActivityRunner_extends","runActivity","round_the_world_game_min","dimensionsStyle","style","className","onClick","onReturnNavigation","src_IFrameDisplayer","IFrameDisplayer","IFrameDisplayer_extends","src","contentLink","src_ActivityManager","ActivityManager","_this","state","mode","activityComponentWidth","activityComponentHeight","iFrameLink","handleActivitySelection","bind","handleMapNavigation","ActivityManager_extends","selectedActivity","linkToSet","recyle","words","roundTheWorld","enla","mathyBird","setState","updateActivityComponentDimensions","calculatedWidth","window","innerWidth","calculatedHeight","componentWillMount","addEventListener","componentWillUnmount","removeEventListener","currentMode","src_WelcomeScreen","WelcomeScreen","WelcomeScreen_extends","world_logo_default","alt","onEnteringWorld","src_App_0","App","handleEnterWorldClick","hasEnteredWorld","App_extends","isInWorld","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","document","getElementById","URL","toString","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b5e8acab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world-logo.8a798987.png\";","module.exports = __webpack_public_path__ + \"static/media/animal-bear.cbfe55b8.png\";","module.exports = __webpack_public_path__ + \"static/media/animal-cheetah.e6bb236a.png\";","module.exports = __webpack_public_path__ + \"static/media/animal-giraffe.284383c4.png\";","module.exports = __webpack_public_path__ + \"static/media/animal-monkey.0c2b888c.png\";","module.exports = __webpack_public_path__ + \"static/media/animal-panther.7df508ee.png\";","module.exports = __webpack_public_path__ + \"static/media/map.00d0fac0.png\";","import * as BasicCustomMap from '@pcs4kids/basic-custom-map';\nimport * as React from 'react';\n\nimport bearImage from './images/animal-bear.png';\nimport cheetahImage from './images/animal-cheetah.png';\nimport giraffeImage from './images/animal-giraffe.png';\nimport monkeyImage from './images/animal-monkey.png';\nimport pantherImage from './images/animal-panther.png';\nimport mapImage from './images/map.png';\n\ninterface IProps {\n  onActivitySelection: (parameter: any) => void;\n  width: number;\n  height: number;\n}\n\nclass ActivityMap extends React.Component<IProps> {\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  private drawMap() {\n    const activityRunFunction = this.props.onActivitySelection;\n    const map = {\n      title: 'Fun Island',\n      imageSource: mapImage,\n      coordinateSpace: {\n        width: 750,\n        height: 500\n      },\n      pins: [\n        {\n          name: 'Giddy Giraffe',\n          description: 'Come along for a great ride with our G!',\n          imageSource: giraffeImage,\n          activityToRun: 'recycle',\n          position: {\n            x: 180,\n            y: 200\n          },\n          dimensions: {\n            width: 50,\n            height: 70\n          },\n          callbackFunction: activityRunFunction\n        },\n        {\n          name: 'Mischievous Monkey',\n          description: 'Watch out before he steals your wallet!',\n          imageSource: monkeyImage,\n          activityToRun: 'words',\n          position: {\n            x: 500,\n            y: 350\n          },\n          dimensions: {\n            width: 50,\n            height: 65\n          },\n          callbackFunction: activityRunFunction\n        },\n        {\n          name: 'Crafty Cheetah',\n          description: 'Once a Cheetah, always a Cheetah!',\n          imageSource: cheetahImage,\n          activityToRun: 'roundTheWorld',\n          position: {\n            x: 300,\n            y: 75\n          },\n          dimensions: {\n            width: 70,\n            height: 50\n          },\n          callbackFunction: activityRunFunction\n        },\n        {\n          name: 'Pristine Panther',\n          description: 'He\\'s got nothing on our boy Pink Panther!',\n          imageSource: pantherImage,\n          activityToRun: 'enla',\n          position: {\n            x: 500,\n            y: 110\n          },\n          dimensions: {\n            width: 70,\n            height: 50\n          },\n          callbackFunction: activityRunFunction\n        },\n        {\n          name: 'Baddie Bear',\n          description: 'Big Bad Bear waits for nobody!',\n          imageSource: bearImage,\n          activityToRun: 'mathyBird',\n          position: {\n            x: 350,\n            y: 275\n          },\n          dimensions: {\n            width: 70,\n            height: 50\n          },\n          callbackFunction: activityRunFunction\n        }\n      ]\n    }\n    BasicCustomMap.createMap('activity-map', map);\n  }\n\n  public componentDidMount(){\n    this.drawMap();\n  }\n\n  public componentDidUpdate() {\n    this.drawMap();\n  }\n\n  public render() {\n\n    return (\n      <svg id='activity-map' width={this.props.width} height={this.props.height} />\n    );\n  }\n}\n\nexport default ActivityMap;\n","import * as RoundTheWorldGame from '@pcs4kids/round-the-world';\nimport * as React from 'react';\n\ninterface IProps {\n  onReturnNavigation: () => void;\n  width: number;\n  height: number;\n}\nclass ActivityRunner extends React.Component<IProps> {\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  private runActivity() {\n    RoundTheWorldGame.createGameInDiv('activity-canvas');\n  }\n\n  public componentDidMount() {\n    this.runActivity();\n  }\n\n  public render() {\n    const dimensionsStyle = {\n      width: this.props.width,\n      height: this.props.height\n    };\n    return (\n      <div>\n        <div id='activity-canvas' style={dimensionsStyle} />\n        <br />\n        <br />\n        <button className='btn pcs4kids-world-btn' onClick={this.props.onReturnNavigation}>Map</button>\n      </div>\n    );\n  }\n}\n\nexport default ActivityRunner;\n","import * as React from 'react';\r\n\r\ninterface IProps {\r\n  onReturnNavigation: (parameter: any) => void;\r\n  width: number;\r\n  height: number;\r\n  contentLink: string\r\n}\r\n\r\nclass IFrameDisplayer extends React.Component<IProps> {\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n  }\r\n\r\n  public render() {\r\n\r\n    return (\r\n      <div id='content-iframe' >\r\n        <iframe src={this.props.contentLink} width={this.props.width} height={this.props.height} />\r\n        <br />\r\n        <br />\r\n        <button className='btn pcs4kids-world-btn' onClick={this.props.onReturnNavigation}>Map</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IFrameDisplayer;\r\n","import * as React from 'react';\nimport ActivityMap from './ActivityMap';\nimport ActivityRunner from './ActivityRunner';\nimport IFrameDisplayer from './IFrameDisplayer';\n\n\ninterface IState {\n  mode: string;\n  activityComponentWidth: number;\n  activityComponentHeight: number;\n  iFrameLink: string\n}\n\nclass ActivityManager extends React.Component<any, IState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = { mode: 'map', activityComponentWidth: 750, activityComponentHeight: 500, iFrameLink: '' };\n    this.handleActivitySelection = this.handleActivitySelection.bind(this);\n    this.handleMapNavigation = this.handleMapNavigation.bind(this);\n  }\n\n  private handleActivitySelection(selectedActivity: any) {\n    const mappings = {\n      recyle: 'http://recyclegame.nadiamayangputri.com/',\n      words: 'https://even-rice.surge.sh/',\n      roundTheWorld: 'https://pcs4kids.github.io/round-the-world/',\n      enla: 'http://elna-sirmuel.surge.sh/',\n      mathyBird: 'http://dev.pcs4kids.org/games//mathybird/mathybird/',\n    }\n    const linkToSet = mappings[selectedActivity.activityToRun];\n    this.setState({ mode: 'iframe', iFrameLink: linkToSet });\n  }\n\n  private handleMapNavigation() {\n    this.setState({ mode: 'map' });\n  }\n\n  private updateActivityComponentDimensions() {\n    const calculatedWidth = window.innerWidth * 0.60;\n    const calculatedHeight = calculatedWidth * 0.5625;\n    this.setState({ activityComponentWidth: calculatedWidth, activityComponentHeight: calculatedHeight });\n  }\n\n  public componentWillMount() {\n    this.updateActivityComponentDimensions();\n    window.addEventListener('resize', this.updateActivityComponentDimensions.bind(this));\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('resize', this.updateActivityComponentDimensions.bind(this));\n  }\n\n  public render() {\n    const currentMode = this.state.mode;\n    const activityComponentWidth = this.state.activityComponentWidth;\n    const activityComponentHeight = this.state.activityComponentHeight;\n    return (\n      <div>\n        {currentMode === 'map' &&\n          <ActivityMap onActivitySelection={this.handleActivitySelection} width={activityComponentWidth} height={activityComponentHeight} />\n        }\n        {currentMode === 'activity' &&\n          <ActivityRunner onReturnNavigation={this.handleMapNavigation} width={activityComponentWidth} height={activityComponentHeight} />\n        }\n        {currentMode === 'iframe' &&\n          <IFrameDisplayer contentLink={this.state.iFrameLink} onReturnNavigation={this.handleMapNavigation} width={activityComponentWidth} height={activityComponentHeight} />\n        }\n      </div>\n    );\n  }\n\n\n}\n\nexport default ActivityManager;\n","import * as React from 'react';\nimport logo from './images/world-logo.png';\n\ninterface IProps {\n  onEnteringWorld: () => void;\n}\n\nclass WelcomeScreen extends React.Component<IProps> {\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <div>\n        <img src={logo} className='app-logo' alt={logo} />\n        <div className='enter-button'>\n          <button onClick={this.props.onEnteringWorld} className='btn pcs4kids-world-btn enter-world'>\n            Enter World\n            <i className='glyphicon glyphicon-arrow-right arrow' />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WelcomeScreen;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as React from 'react';\nimport ActivityManager from './ActivityManager';\nimport './App.css';\nimport WelcomeScreen from './WelcomeScreen';\n\ninterface IState {\n  hasEnteredWorld: boolean;\n}\n\nclass App extends React.Component<any, IState> {\n\n  constructor(props: any) {\n    super(props);\n    this.handleEnterWorldClick = this.handleEnterWorldClick.bind(this);\n    this.state = { hasEnteredWorld: false };\n\n  }\n\n  private handleEnterWorldClick() {\n    this.setState({ hasEnteredWorld: true });\n  }\n\n  public render() {\n    const isInWorld = this.state.hasEnteredWorld\n    return (\n      <div className='app'>\n        {!isInWorld &&\n          <WelcomeScreen onEnteringWorld={this.handleEnterWorldClick} />\n        }\n        {isInWorld &&\n          <ActivityManager />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}